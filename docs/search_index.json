[["cover_analysis.html", "Chapter 4 Forest Cover Analysis 4.1 Read Data 4.2 Post-Lidar Acquisition Timber Harvests 4.3 Forest Cover Summary 4.4 Total Area by Crown Group Class 4.5 No Harvest Post-Lidar Area by Crown Group Class 4.6 Spatial Arrangement by Crown Group Class 4.7 Rx Fire Unit Summary 4.8 Rx Fire Unit Contour", " Chapter 4 Forest Cover Analysis # turn off the s2 processing ## https://stackoverflow.com/questions/68478179/how-to-resolve-spherical-geometry-failures-when-joining-spatial-data sf::sf_use_s2(FALSE) 4.1 Read Data Vector data and forest cover data created in prior chapters. # read forests_bhnf &lt;- sf::st_read(&quot;../data/forests_bhnf.gpkg&quot;) bhef_boundary &lt;- sf::st_read(&quot;../data/bhef_boundary.gpkg&quot;) bhef_harvests &lt;- sf::st_read(&quot;../data/bhef_harvests.gpkg&quot;) research_plots &lt;- sf::st_read(&quot;../data/research_plots.gpkg&quot;) stem_map &lt;- sf::st_read(&quot;../data/stem_map.gpkg&quot;) rx_fire &lt;- sf::st_read(&quot;../data/rx_fire.gpkg&quot;) # # forest cov crowns_group &lt;- sf::st_read(&quot;../data/crowns_group.gpkg&quot;) # tree_tops &lt;- sf::st_read(&quot;../data/tree_tops.gpkg&quot;) # chm &lt;- stars::read_stars(&quot;../data/chm.tif&quot;) # elevation bhef_elev &lt;- stars::read_stars(&quot;../data/bhef_elev.tif&quot;) 4.1.1 Data Preparation ################################################ ################################################ # add colors to the crowns group ################################################ ################################################ col_data &lt;- data.frame( crown_group_class = sort(unique(crowns_group$crown_group_class)) , crown_group_class_color = viridis::turbo(n = length(unique(crowns_group$crown_group_class)), alpha = 0.5) ) crowns_group &lt;- crowns_group %&gt;% # dplyr::select(-crown_group_class_color) %&gt;% dplyr::left_join(col_data, by = c(&quot;crown_group_class&quot;=&quot;crown_group_class&quot;)) ################################################ ################################################ # create contour data ################################################ ################################################ # sequence by 5&#39;s to get 5m breaks list for contour seq_brk &lt;- seq(0, 40000, 5) # create contour data bhef_contour &lt;- bhef_elev %&gt;% stars::st_contour( na.rm = TRUE , contour_lines = FALSE , breaks = # classInt::classIntervals(na.omit(as.vector(x[[1]])))$brks seq_brk[ seq_brk &gt; min(na.omit(as.vector(bhef_elev[[1]]))) - 5 &amp; seq_brk &lt; max(na.omit(as.vector(bhef_elev[[1]]))) + 5 ] ) 4.1.2 Read NAIP Data National Agriculture Imagery Program (NAIP) imagery for the BHEF was manually ;/ downloaded from the USGS Science Data Explorer. ################################################ ################################################ # load naip tif with stars ################################################ ################################################ naip_st &lt;- stars::read_stars(&quot;../data/naip/bhef_naip_20200809_1m.tif&quot;) # crop naip_st &lt;- naip_st %&gt;% sf::st_crop(., sf::st_buffer(sf::st_transform(bhef_boundary, crs = sf::st_crs(naip_st)), dist = 500)) # plot(naip_st %&gt;% dplyr::slice(band, 1:3), axes = TRUE) # plot(naip_st[,,,3:1], axes = TRUE) # set rgb image # band 3 = red, band 2 = green, band 1 = blue naip_rgb &lt;- stars::st_rgb( naip_st[,,,3:1] , dimension = 3 , use_alpha = FALSE # , stretch = &quot;histogram&quot; , probs = c(0.005, 0.995) , stretch = &quot;percent&quot; ) 4.2 Post-Lidar Acquisition Timber Harvests Lidar data was collected in 2017. Spatially identify areas within BHEF where timber harvest (not including TSI) treatments occurred in 2017 or later. # find harvests after lidar collection harvests_post_lidar &lt;- bhef_harvests %&gt;% dplyr::filter(year_id &gt;= 2017) %&gt;% sf::st_intersection(bhef_boundary) # plot ggplot() + geom_sf(data = harvests_post_lidar , aes(fill = treatment_type_grp) , lwd = 0 ) + geom_sf(data = bhef_boundary, alpha = 0, lwd = 1, color = &quot;black&quot;, linetype = &quot;dashed&quot;) + geom_sf(data = rx_fire, alpha = 0, lwd = 1, color = &quot;orangered&quot;) + geom_sf_label(data = rx_fire, aes(label = unit) , label.size = NA , alpha = 0 , size = 2 ) + geom_sf_label(data = harvests_post_lidar, aes(label = year_id) , label.size = NA , alpha = 0 , size = 2.5 ) + scale_fill_viridis_d(option = &quot;viridis&quot;, alpha = 0.8) + labs( title = &quot;BHEF Post-Lidar Acquisition Timber Harvests&quot; , subtitle = paste0(&quot;Rx fire units&quot;) , caption = paste0( &quot;*Percent of BHEF Area Harvested Post-Lidar: &quot; , scales::percent( as.numeric(sum(sf::st_area(harvests_post_lidar))) / as.numeric(sum(sf::st_area(bhef_boundary))) , accuracy = 0.1 ) ) ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.position = &quot;bottom&quot; , legend.title = element_blank() , axis.text = element_text(size = 8) , panel.border = element_blank() , plot.title = element_text(size = 12, face = &quot;bold&quot;, margin = margin(0,0,2,0)) , plot.subtitle = element_text(size=8, face=&quot;italic&quot;, color=&quot;orangered&quot;, margin = margin(0,0,0,0)) , plot.caption = element_text(size=10, face=&quot;bold.italic&quot;) ) There have been 181 hectares in BHEF with timber harvest treatments completed after the lidar acquisition in 2017. This represents 13.2% of the total BHEF area (1,378 hectares). 4.2.1 Join Harvests to Rx Fire Units rx_fire &lt;- rx_fire %&gt;% dplyr::left_join( rx_fire %&gt;% dplyr::select(unit) %&gt;% sf::st_intersection( sf::st_union(harvests_post_lidar %&gt;% dplyr::select(nffid)) ) %&gt;% dplyr::mutate(postlidar_harvest_area_m2 = as.numeric(sf::st_area(.))) %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::group_by(unit) %&gt;% dplyr::summarise(postlidar_harvest_area_m2 = sum(postlidar_harvest_area_m2)) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(unit, postlidar_harvest_area_m2) , by = c(&quot;unit&quot; = &quot;unit&quot;) ) %&gt;% dplyr::mutate( has_postlidar_harvest = ifelse(!is.na(postlidar_harvest_area_m2), 1, 0) , postlidar_harvest_area_m2 = ifelse(!is.na(postlidar_harvest_area_m2), postlidar_harvest_area_m2, 0) , postlidar_harvest_area_ha = ifelse(!is.na(postlidar_harvest_area_m2), postlidar_harvest_area_m2/10000, 0) , area_m2 = as.numeric(sf::st_area(.)) , area_ha = as.numeric(sf::st_area(.)) / 10000 , pct_postlidar_harvest_area = postlidar_harvest_area_m2 / area_m2 ) # plot ggplot(data = rx_fire) + geom_col(aes(y = reorder(unit, pct_postlidar_harvest_area), x = area_ha) , width = 0.7, fill = &quot;navy&quot;, alpha = 0.5 ) + geom_col(aes(y = reorder(unit, pct_postlidar_harvest_area), x = postlidar_harvest_area_ha) , width = 0.7, fill = &quot;navy&quot;, alpha = 0.9 ) + geom_text( aes(y = reorder(unit, pct_postlidar_harvest_area) , x = 0 , label = scales::percent(pct_postlidar_harvest_area, accuracy = 1) ) , color = &quot;white&quot; , size = 3 , fontface = &quot;bold&quot; , hjust = -0.1 , vjust = 0.1 ) + labs( title = &quot;Percent of Rx Fire Unit Area with Timber Harvest Post-Lidar Acquisition&quot; # , subtitle = &quot;within BHEF boundary and bounding box of research plot area&quot; ) + xlab(&quot;Area (ha)&quot;) + ylab(&quot;Rx Fire Unit&quot;) + scale_x_continuous(labels = scales::comma) + theme_bw() + theme( legend.position = &quot;none&quot; , plot.title = element_text(size = 12, face = &quot;bold&quot;, margin = margin(0,0,2,0)) , axis.text.y = element_text(size = 10, face = &quot;bold&quot;) ) 4.3 Forest Cover Summary In prior chapter, interlocking tree crowns were grouped together to form distinct tree crown classes. Experimental Forest-wide summary statistics were shown here. Explore the canopy cover distributions further. For reference, tree classes are based on Steel et al.Â 2021. Height thresholds were used to define canopy (&gt;8 m), subcanopy (28 m) and understory (12 m). Crown groups are defined by the number of trees in a crown group and the composition of canopy and subcanopy trees in the group: Individual Tree : single tree (canopy or subcanopy) without interlocking crown Small Group - Canopy : 2-10 trees with interlocking crowns where 75% or more of the trees are canopy (&gt;8 m) Small Group - Subcanopy : 2-10 trees with interlocking crowns where 75% or more of the trees are subcanopy (2-8 m) Small Group - Mixed : 2-10 trees with interlocking crowns with neither canopy nor subcanopy comprising &gt;75% of trees Medium Group - Canopy : 11-40 trees with interlocking crowns where 75% or more of the trees are canopy (&gt;8 m) Medium Group - Subcanopy : 11-40 trees with interlocking crowns where 75% or more of the trees are subcanopy (2-8 m) Medium Group - Mixed : 11-40 trees with interlocking crowns with neither canopy nor subcanopy comprising &gt;75% of trees Continuous - Canopy : &gt;40 trees with interlocking crowns where 75% or more of the trees are canopy (&gt;8 m) Continuous - Subcanopy : &gt;40 trees with interlocking crowns where 75% or more of the trees are subcanopy (2-8 m) Continuous - Mixed : &gt;40 trees with interlocking crowns with neither canopy nor subcanopy comprising &gt;75% of trees 4.4 Total Area by Crown Group Class The total area of the BHEF is approximately 1,378 hectares (3,405 acres). # set up data bhef_area_ha &lt;- sum(as.numeric(sf::st_area(bhef_boundary))/10000) forestcov_area_ha &lt;- sum(as.numeric(sf::st_area(sf::st_intersection(crowns_group, bhef_boundary)))/10000, na.rm = TRUE) non_forestcov_area_ha &lt;- bhef_area_ha - forestcov_area_ha temp_dta &lt;- data.frame( crown_group_class = &quot;Non-Tree Cover&quot; , area_ha = non_forestcov_area_ha ) crowns_group_area_sum &lt;- crowns_group %&gt;% sf::st_intersection(bhef_boundary) %&gt;% dplyr::mutate(crown_group_area_ha = as.numeric(sf::st_area(.))/10000) %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::group_by(crown_group_class) %&gt;% dplyr::summarise(area_ha = sum(crown_group_area_ha, na.rm = TRUE)) %&gt;% dplyr::ungroup() %&gt;% dplyr::bind_rows(temp_dta) %&gt;% dplyr::mutate( pct_area = area_ha / bhef_area_ha ) %&gt;% dplyr::arrange(desc(area_ha)) # plot ggplot(data = crowns_group_area_sum) + geom_col(aes(y = reorder(crown_group_class, area_ha), x = area_ha, fill = area_ha), width = 0.7) + geom_text( aes(y = reorder(crown_group_class, area_ha), x = area_ha + 2, label = scales::comma(area_ha, accuracy = 1)) , color = &quot;black&quot; , size = 4 , fontface = &quot;bold&quot; # , position = position_dodge(0.9) , hjust = -0.1 , vjust = -0.5 ) + geom_text( aes(y = reorder(crown_group_class, area_ha), x = area_ha + 2, label = scales::percent(pct_area, accuracy = 1)) , color = &quot;black&quot; , size = 3 # , position = position_dodge(0.9) , hjust = -0.1 , vjust = 0.5 ) + labs( title = &quot;BHEF Area (ha) by Crown Group Class&quot; , subtitle = &quot;*Note: a tree is classified as cover &gt;= 2m tall in 2017 based on lidar acquisition&quot; ) + xlab(&quot;Area (ha)&quot;) + ylab(&quot;&quot;) + scale_x_continuous(labels = scales::comma) + scale_fill_viridis_c(alpha = 0.7, option = &quot;cividis&quot;, direction = -1) + theme_bw() + theme( legend.position = &quot;none&quot; , plot.title = element_text(size = 12, face = &quot;bold&quot;, margin = margin(0,0,2,0)) , plot.subtitle = element_text(size=8, face=&quot;italic&quot;, color=&quot;gray20&quot;, margin = margin(0,0,0,0)) , axis.text.y = element_text(size = 10, face = &quot;bold&quot;) ) 4.5 No Harvest Post-Lidar Area by Crown Group Class The total area of the BHEF which has not been harvested after the 2017 lidar acquisition is approximately 1,197 hectares (2,957 acres). # set up data bhef_area_ha &lt;- sum(as.numeric(sf::st_area(sf::st_difference(bhef_boundary, sf::st_union(harvests_post_lidar))))/10000) forestcov_area_ha &lt;- sum(as.numeric(sf::st_area(sf::st_intersection(crowns_group, sf::st_difference(bhef_boundary, sf::st_union(harvests_post_lidar)))))/10000, na.rm = TRUE) non_forestcov_area_ha &lt;- bhef_area_ha - forestcov_area_ha temp_dta &lt;- data.frame( crown_group_class = &quot;Non-Tree Cover&quot; , area_ha = non_forestcov_area_ha ) crowns_group_area_sum_woharv &lt;- crowns_group %&gt;% sf::st_intersection(sf::st_difference(bhef_boundary, sf::st_union(harvests_post_lidar))) %&gt;% dplyr::mutate(crown_group_area_ha = as.numeric(sf::st_area(.))/10000) %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::group_by(crown_group_class) %&gt;% dplyr::summarise(area_ha = sum(crown_group_area_ha, na.rm = TRUE)) %&gt;% dplyr::ungroup() %&gt;% dplyr::bind_rows(temp_dta) %&gt;% dplyr::mutate( pct_area = area_ha / bhef_area_ha ) %&gt;% dplyr::arrange(desc(area_ha)) # plot ggplot(data = crowns_group_area_sum_woharv) + geom_col(aes(y = reorder(crown_group_class, area_ha), x = area_ha, fill = area_ha), width = 0.7) + geom_text( aes(y = reorder(crown_group_class, area_ha), x = area_ha + 2, label = scales::comma(area_ha, accuracy = 1)) , color = &quot;black&quot; , size = 4 , fontface = &quot;bold&quot; # , position = position_dodge(0.9) , hjust = -0.1 , vjust = -0.5 ) + geom_text( aes(y = reorder(crown_group_class, area_ha), x = area_ha + 2, label = scales::percent(pct_area, accuracy = 1)) , color = &quot;black&quot; , size = 3 # , position = position_dodge(0.9) , hjust = -0.1 , vjust = 0.5 ) + labs( title = &quot;No Harvest Post-Lidar BHEF Area (ha) by Crown Group Class&quot; , subtitle = &quot;*Note: a tree is classified as cover &gt;= 2m tall in 2017 based on lidar acquisition&quot; ) + xlab(&quot;Area (ha)&quot;) + ylab(&quot;&quot;) + scale_x_continuous(labels = scales::comma) + scale_fill_viridis_c(alpha = 0.7, option = &quot;cividis&quot;, direction = -1) + theme_bw() + theme( legend.position = &quot;none&quot; , plot.title = element_text(size = 12, face = &quot;bold&quot;, margin = margin(0,0,2,0)) , plot.subtitle = element_text(size=8, face=&quot;italic&quot;, color=&quot;gray20&quot;, margin = margin(0,0,0,0)) , axis.text.y = element_text(size = 10, face = &quot;bold&quot;) ) 4.6 Spatial Arrangement by Crown Group Class # function to map for each cover class my_full_area_map &lt;- function(my_data, my_class){ #generate title my_title &lt;- paste0(my_class) my_caption &lt;- paste0( scales::percent( (crowns_group_area_sum %&gt;% dplyr::filter(crown_group_class==my_class))$pct_area , accuracy = 1 ) , &quot; of total BHEF Area&quot; ) #plot ( ggplot() + geom_sf(data = bhef_boundary, alpha = 0, lwd = 1, color = &quot;black&quot;, linetype = &quot;dashed&quot;) + geom_sf(data = rx_fire, alpha = 0, lwd = 1, color = &quot;orangered&quot;) + geom_sf(data = my_data %&gt;% dplyr::filter(crown_group_class==my_class) , fill = (col_data %&gt;% dplyr::filter(crown_group_class==my_class))$crown_group_class_color , lwd = NA ) + geom_sf_label(data = rx_fire, aes(label = unit) , label.size = NA , alpha = 0 , size = 2 ) + labs( title = my_title , subtitle = &quot;Spatial Arrangement on BHEF&quot; , caption = my_caption ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_blank() , axis.text = element_text(size = 8) , panel.border = element_blank() , plot.title = element_text(size = 12, face = &quot;bold&quot;, margin = margin(0,0,2,0)) , plot.subtitle = element_text(size=10, color=&quot;gray20&quot;, margin = margin(0,0,0,0)) , plot.caption = element_text(size=10, face=&quot;bold.italic&quot;) ) ) } # plot with loop to create a plot for each class my_classes &lt;- sort(unique(crowns_group$crown_group_class)) # for (i in 1:length(my_classes)) { for (i in 1:3) { print( my_full_area_map( my_data = crowns_group %&gt;% sf::st_intersection(bhef_boundary) , my_class = my_classes[i] ) ) } 4.7 Rx Fire Unit Summary # summarize area by coverage type temp_rx_crown &lt;- rx_fire %&gt;% dplyr::select(unit) %&gt;% sf::st_difference( sf::st_union(harvests_post_lidar %&gt;% dplyr::select(nffid)) ) %&gt;% sf::st_intersection( crowns_group %&gt;% dplyr::select(crown_group_class) ) %&gt;% dplyr::mutate(area_m2 = as.numeric(sf::st_area(.))) %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::group_by(unit, crown_group_class) %&gt;% dplyr::summarise(area_m2 = sum(area_m2)) %&gt;% dplyr::ungroup() %&gt;% dplyr::select(unit, crown_group_class, area_m2) # join to base rx fire data rx_crown_sum &lt;- rx_fire %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::select(unit, postlidar_harvest_area_m2) %&gt;% dplyr::rename(area_m2 = postlidar_harvest_area_m2) %&gt;% dplyr::mutate(crown_group_class = &quot;Post-Lidar Harvest&quot;) %&gt;% dplyr::relocate(names(temp_rx_crown)) %&gt;% dplyr::bind_rows(temp_rx_crown) %&gt;% dplyr::left_join( rx_fire %&gt;% sf::st_set_geometry(NULL) %&gt;% dplyr::select(unit, area_m2) %&gt;% dplyr::rename(total_area_m2 = area_m2) , by = c(&quot;unit&quot; = &quot;unit&quot;) ) # find non-tree cover rx_crown_sum &lt;- rx_crown_sum %&gt;% dplyr::bind_rows( # find left over area rx_crown_sum %&gt;% dplyr::group_by(unit) %&gt;% dplyr::summarise(cov_area_m2 = sum(area_m2), total_area_m2 = max(total_area_m2)) %&gt;% dplyr::ungroup() %&gt;% dplyr::mutate( area_m2 = total_area_m2 - cov_area_m2 , crown_group_class = &quot;Non-Tree Cover&quot; ) %&gt;% dplyr::select(names(rx_crown_sum)) %&gt;% dplyr::relocate(names(rx_crown_sum)) ) %&gt;% dplyr::mutate( pct_area = area_m2/total_area_m2 , area_ha = area_m2/10000 ) %&gt;% dplyr::arrange(unit, crown_group_class) rx_crown_sum %&gt;% dplyr::mutate( cover = dplyr::case_when( crown_group_class %in% c(&quot;Non-Tree Cover&quot;, &quot;Post-Lidar Harvest&quot;) ~ crown_group_class , startsWith(crown_group_class, &quot;Continuous&quot;) ~ &quot;Continuous Tree Cover&quot; , TRUE ~ &quot;Sm/Med Grp. &amp; Indiv. Tree Cover&quot; ) , cover_num = dplyr::case_when( crown_group_class == &quot;Non-Tree Cover&quot; ~ 4 , crown_group_class == &quot;Post-Lidar Harvest&quot; ~ 3 , startsWith(crown_group_class, &quot;Continuous&quot;) ~ 1 , TRUE ~ 2 ) ) %&gt;% dplyr::group_by(unit, cover, cover_num) %&gt;% dplyr::summarise( pct_area = sum(pct_area) , area_m2 = sum(area_m2) , total_area_ha = max(total_area_m2)/10000 ) %&gt;% dplyr::ungroup() %&gt;% # plot ggplot() + geom_col(aes( y = reorder(unit, total_area_ha) , x = pct_area , fill = reorder(cover, -cover_num) ) , width = 0.7 ) + scale_fill_viridis_d(option = &quot;cividis&quot;, alpha = 1, direction = -1) + geom_text( aes( y = reorder(unit, total_area_ha) , x = pct_area , label = scales::percent( ifelse(pct_area &lt; 0.05, NA, pct_area) , accuracy = 1) , group = reorder(cover, -cover_num) ) , position = position_stack(vjust = 0.5) , color = &quot;white&quot; , size = 3 , fontface = &quot;bold&quot; # , hjust = -0.1 # , vjust = 0.1 ) + geom_text( aes( y = reorder(unit, total_area_ha) , x = 1.06 , label = paste0(scales::comma( total_area_ha , accuracy = 1) , &quot; ha&quot; ) ) , color = &quot;black&quot; , size = 4 , fontface = &quot;bold&quot; ) + labs( title = &quot;Cover Classification of Rx Fire Unit Area&quot; , subtitle = &quot;*Note: a tree is classified as cover &gt;= 2m tall in 2017 based on lidar acquisition&quot; ) + xlab(&quot;% of Area&quot;) + ylab(&quot;Rx Fire Unit&quot;) + scale_x_continuous(labels = scales::percent) + theme_bw() + theme( plot.title = element_text(size = 12, face = &quot;bold&quot;, margin = margin(0,0,2,0)) , plot.subtitle = element_text(size=8, face=&quot;italic&quot;, color=&quot;gray20&quot;, margin = margin(0,0,0,0)) , axis.text.y = element_text(size = 10, face = &quot;bold&quot;) , legend.title = element_blank() ) 4.7.1 Rx Fire Unit Cover Map ######################################### ######################################### # map of unit w/ canopy ######################################### ######################################### ggplot() + stars::geom_stars(data = naip_rgb[ rx_fire %&gt;% dplyr::slice(16) %&gt;% sf::st_buffer(dist = 50) %&gt;% sf::st_transform(crs = sf::st_crs(naip_st)) %&gt;% sf::st_bbox() ]) + scale_fill_identity() + # !!! don&#39;t take this out or RGB plot will kill your computer geom_sf(data = rx_fire %&gt;% dplyr::slice(16) %&gt;% sf::st_transform(crs = sf::st_crs(naip_st)) , alpha = 0 , lwd = 1.5 , color = &quot;orangered&quot; ) + geom_sf(data = crowns_group %&gt;% sf::st_crop( rx_fire %&gt;% dplyr::slice(16) %&gt;% sf::st_buffer(dist = 50) %&gt;% sf::st_bbox() ) %&gt;% sf::st_transform(crs = sf::st_crs(naip_st)) , lwd = NA , aes(fill = crown_group_class_color) ) + geom_sf(data = harvests_post_lidar %&gt;% sf::st_union() %&gt;% sf::st_crop( rx_fire %&gt;% dplyr::slice(16) %&gt;% sf::st_buffer(dist = 50) %&gt;% sf::st_bbox() ) %&gt;% sf::st_transform(crs = sf::st_crs(naip_st)) , color = &quot;blue&quot; , lwd = 1.5 , fill = &quot;black&quot; , alpha = 0.4 ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.position = &quot;none&quot; , legend.direction = &quot;horizontal&quot; , legend.title = element_blank() , axis.text = element_text(size = 8) , panel.border = element_blank() ) 4.8 Rx Fire Unit Contour ######################################### ######################################### # map of unit w/ contour ######################################### ######################################### # plot ggplot() + stars::geom_stars(data = bhef_elev[ rx_fire %&gt;% dplyr::slice(3) %&gt;% sf::st_buffer(dist = 50) %&gt;% sf::st_bbox() ]) + scale_fill_viridis_c(option = &quot;viridis&quot;, alpha = 0.9, na.value = &quot;transparent&quot;) + geom_sf(data = bhef_contour %&gt;% sf::st_crop( rx_fire %&gt;% dplyr::slice(3) %&gt;% sf::st_buffer(dist = 50) %&gt;% sf::st_bbox() ) , alpha = 0 , lwd = 0.5 , color = &quot;gray30&quot; , show.legend = FALSE ) + geom_sf(data = rx_fire %&gt;% dplyr::slice(3) , alpha = 0 , lwd = 1.5 , color = &quot;orangered&quot; , show.legend = FALSE ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme_bw() + theme( legend.position = &quot;bottom&quot; , legend.direction = &quot;horizontal&quot; , legend.margin = margin(0,0,0,0) , legend.box.margin = margin(-21,0,2,0) , legend.text = element_text(size = 7) , legend.title = element_text(size = 7) , axis.text = element_text(size = 8) , panel.border = element_blank() ) + guides( fill = guide_legend(title=&quot;Elev. (m)&quot;) ) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
